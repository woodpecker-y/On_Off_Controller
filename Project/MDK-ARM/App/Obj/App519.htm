<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\App\Obj\App519.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\App\Obj\App519.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu May 21 17:11:52 2020
<BR><P>
<H3>Maximum Stack Usage =        952 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
vTaskRunTimeStats &rArr; auto_test &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[1c]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1c]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[4]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[4]">BusFault_Handler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
 <LI><a href="#[3]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3]">MemManage_Handler</a><BR>
 <LI><a href="#[5]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[5]">UsageFault_Handler</a><BR>
 <LI><a href="#[94]">USART_SendData</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[94]">USART_SendData</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[1c]">ADC1_2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3f]">AppTaskCreate</a> from app_task.o(i.AppTaskCreate) referenced from main.o(i.main)
 <LI><a href="#[4]">BusFault_Handler</a> from stm32f10x_it.o(i.BusFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1f]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[20]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[15]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[16]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[17]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[18]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[19]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1a]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1b]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[7]">DebugMon_Handler</a> from stm32f10x_it.o(i.DebugMon_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[10]">EXTI0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[32]">EXTI15_10_IRQHandler</a> from stm32f10x_it.o(i.EXTI15_10_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[11]">EXTI1_IRQHandler</a> from stm32f10x_it.o(i.EXTI1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[12]">EXTI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[13]">EXTI3_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[14]">EXTI4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[21]">EXTI9_5_IRQHandler</a> from stm32f10x_it.o(i.EXTI9_5_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[e]">FLASH_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f10x_it.o(i.HardFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2a]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[29]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2c]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2b]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[3]">MemManage_Handler</a> from stm32f10x_it.o(i.MemManage_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f10x_it.o(i.NMI_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[b]">PVD_IRQHandler</a> from stm32f10x_it.o(i.PVD_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[8]">PendSV_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[f]">RCC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[33]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[d]">RTC_IRQHandler</a> from bsp_rtc.o(i.RTC_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2d]">SPI1_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2e]">SPI2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[6]">SVC_Handler</a> from port.o(.emb_text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[9]">SysTick_Handler</a> from stm32f10x_it.o(i.SysTick_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[36]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[c]">TAMPER_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[22]">TIM1_BRK_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[25]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[24]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[23]">TIM1_UP_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[26]">TIM2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[27]">TIM3_IRQHandler</a> from stm32f10x_it.o(i.TIM3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[28]">TIM4_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[2f]">USART1_IRQHandler</a> from stm32f10x_it.o(i.USART1_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[30]">USART2_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[31]">USART3_IRQHandler</a> from stm32f10x_it.o(i.USART3_IRQHandler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[34]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1d]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[1e]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[5]">UsageFault_Handler</a> from stm32f10x_it.o(i.UsageFault_Handler) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[a]">WWDG_IRQHandler</a> from startup_stm32f10x_md.o(.text) referenced from startup_stm32f10x_md.o(RESET)
 <LI><a href="#[37]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f10x_md.o(.text)
 <LI><a href="#[3d]">_sputc</a> from printf8.o(i._sputc) referenced from printf8.o(i.__0sprintf$8)
 <LI><a href="#[3e]">_sputc</a> from printfa.o(i._sputc) referenced from printfa.o(i.__0vsprintf)
 <LI><a href="#[3c]">fputc</a> from printf.o(i.fputc) referenced from printfa.o(i.__0printf)
 <LI><a href="#[3c]">fputc</a> from printf.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[35]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
 <LI><a href="#[41]">prvIdleTask</a> from tasks.o(i.prvIdleTask) referenced from tasks.o(i.vTaskStartScheduler)
 <LI><a href="#[40]">prvTaskExitError</a> from port.o(i.prvTaskExitError) referenced from port.o(i.pxPortInitialiseStack)
 <LI><a href="#[3b]">vTaskRunTimeStats</a> from vtaskruntimestats.o(i.vTaskRunTimeStats) referenced from app_task.o(i.AppTaskCreate)
 <LI><a href="#[3a]">vTask_Calculate</a> from vtask_calculate.o(i.vTask_Calculate) referenced from app_task.o(i.AppTaskCreate)
 <LI><a href="#[38]">vTask_Com_Rf_Valve</a> from vtask_com_rf_valve.o(i.vTask_Com_Rf_Valve) referenced from app_task.o(i.AppTaskCreate)
 <LI><a href="#[39]">vTask_Power_Display_Temp_Runled</a> from vtask_power_display_temp_runled.o(i.vTask_Power_Display_Temp_Runled) referenced from app_task.o(i.AppTaskCreate)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[37]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[1c3]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[42]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[59]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c4]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c5]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c6]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1c7]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1c8]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[6]"></a>SVC_Handler</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c1]"></a>__asm___6_port_c_39a90d8d__prvStartFirstTask</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[8]"></a>PendSV_Handler</STRONG> (Thumb, 72 bytes, Stack size 0 bytes, port.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PendSV_Handler &rArr; vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c9]"></a>vPortGetIPSR</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, port.o(.emb_text), UNUSED)

<P><STRONG><a name="[45]"></a>mktime</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, mktime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Write
</UL>

<P><STRONG><a name="[184]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_unpack
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_pack
</UL>

<P><STRONG><a name="[ee]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_request
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_digit
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Read
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[1ca]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[48]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1cb]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1cc]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[47]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>

<P><STRONG><a name="[af]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mount
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Com_Rf_Valve
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRunTimeStats
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteBytes
</UL>

<P><STRONG><a name="[1cd]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[49]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[169]"></a>strlen</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, strlen.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
</UL>

<P><STRONG><a name="[b0]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_request
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteBytes
</UL>

<P><STRONG><a name="[165]"></a>strcpy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, strcpy.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_id
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_gn_id
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
</UL>

<P><STRONG><a name="[157]"></a>strncmp</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, strncmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
</UL>

<P><STRONG><a name="[4a]"></a>__aeabi_dadd</STRONG> (Thumb, 322 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temp
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[4f]"></a>__aeabi_dsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[50]"></a>__aeabi_drsub</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temp
</UL>

<P><STRONG><a name="[51]"></a>__aeabi_dmul</STRONG> (Thumb, 228 bytes, Stack size 48 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_temp_by_resistance
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDG_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[52]"></a>__aeabi_ddiv</STRONG> (Thumb, 222 bytes, Stack size 32 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_temp_by_resistance
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[53]"></a>__aeabi_ui2d</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_temp_by_resistance
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDG_Init
</UL>

<P><STRONG><a name="[54]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temp
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_temp_by_resistance
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDG_Init
</UL>

<P><STRONG><a name="[1ce]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[12a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[56]"></a>__aeabi_uldivmod</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[4b]"></a>__aeabi_llsl</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1cf]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[55]"></a>__aeabi_llsr</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, llushr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
</UL>

<P><STRONG><a name="[1d0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[4c]"></a>__aeabi_lasr</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, llsshr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1d1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[57]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Read
</UL>

<P><STRONG><a name="[46]"></a>_localtime</STRONG> (Thumb, 134 bytes, Stack size 8 bytes, localtime_i.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[1d2]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[4e]"></a>_double_round</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[4d]"></a>_double_epilogue</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[58]"></a>__aeabi_d2ulz</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[125]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, cdrcmple.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_md.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1d3]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[1d4]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[76]"></a>ADC_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[75]"></a>ADC_DMACmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_DMACmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[7a]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[7f]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_SampleOnce
</UL>

<P><STRONG><a name="[7e]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_SampleOnce
</UL>

<P><STRONG><a name="[78]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[72]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f10x_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[74]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, stm32f10x_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[77]"></a>ADC_ResetCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_ResetCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[7d]"></a>ADC_SoftwareStartConvCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_SoftwareStartConvCmd))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_SampleOnce
</UL>

<P><STRONG><a name="[79]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[3f]"></a>AppTaskCreate</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, app_task.o(i.AppTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = AppTaskCreate &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[5f]"></a>BASIC_TIM_Init</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, bsp_timbase.o(i.BASIC_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BASIC_TIM_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearFlag
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[67]"></a>BKP_DeInit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Config
</UL>

<P><STRONG><a name="[ed]"></a>BKP_ReadBackupRegister</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_ReadBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[f0]"></a>BKP_WriteBackupRegister</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, stm32f10x_bkp.o(i.BKP_WriteBackupRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[6a]"></a>BSP_ADC_GetADC</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, bsp_adc.o(i.BSP_ADC_GetADC))
<BR><BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_SampleOnce
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[73]"></a>BSP_ADC_GetChannel</STRONG> (Thumb, 126 bytes, Stack size 0 bytes, bsp_adc.o(i.BSP_ADC_GetChannel))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[69]"></a>BSP_ADC_Init</STRONG> (Thumb, 326 bytes, Stack size 96 bytes, bsp_adc.o(i.BSP_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = BSP_ADC_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_GetChannel
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_GetADC
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
</UL>

<P><STRONG><a name="[7b]"></a>BSP_ADC_InitSingle</STRONG> (Thumb, 276 bytes, Stack size 104 bytes, bsp_adc.o(i.BSP_ADC_InitSingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = BSP_ADC_InitSingle &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DeInit
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Cmd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ResetCalibration
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMACmd
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_GetChannel
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_GetADC
</UL>
<BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Init
</UL>

<P><STRONG><a name="[12d]"></a>BSP_ADC_LoadConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_adc.o(i.BSP_ADC_LoadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_load_config
</UL>

<P><STRONG><a name="[7c]"></a>BSP_ADC_SampleOnce</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bsp_adc.o(i.BSP_ADC_SampleOnce))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_ADC_SampleOnce
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCmd
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_GetADC
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
</UL>

<P><STRONG><a name="[80]"></a>BSP_COM1_ISR</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp_com.o(i.BSP_COM1_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BSP_COM1_ISR &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_ISR
</UL>

<P><STRONG><a name="[85]"></a>BSP_COM2_ISR</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, bsp_com.o(i.BSP_COM2_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BSP_COM2_ISR &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_ISR
</UL>

<P><STRONG><a name="[86]"></a>BSP_COM3_ISR</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, bsp_com.o(i.BSP_COM3_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BSP_COM3_ISR &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_ISR
</UL>

<P><STRONG><a name="[87]"></a>BSP_COM_ISR</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bsp_com.o(i.BSP_COM_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BSP_COM_ISR &rArr; BSP_COM3_ISR &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM3_ISR
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM2_ISR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM1_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_isr
</UL>

<P><STRONG><a name="[88]"></a>BSP_COM_Init</STRONG> (Thumb, 362 bytes, Stack size 72 bytes, bsp_com.o(i.BSP_COM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = BSP_COM_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_RecvInit
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_GetComIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
</UL>

<P><STRONG><a name="[150]"></a>BSP_COM_LoadConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_com.o(i.BSP_COM_LoadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_load_config
</UL>

<P><STRONG><a name="[151]"></a>BSP_COM_RecvData</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, bsp_com.o(i.BSP_COM_RecvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = BSP_COM_RecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data
</UL>

<P><STRONG><a name="[8f]"></a>BSP_COM_RecvInit</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, bsp_com.o(i.BSP_COM_RecvInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_COM_RecvInit &rArr; BSP_COM_GetComIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_GetComIdx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[92]"></a>BSP_COM_SendChar</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, bsp_com.o(i.BSP_COM_SendChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_COM_SendChar &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_GetComIdx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_char
</UL>

<P><STRONG><a name="[95]"></a>BSP_COM_SendData</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, bsp_com.o(i.BSP_COM_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_COM_SendData &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_GetComIdx
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_data
</UL>

<P><STRONG><a name="[96]"></a>BSP_EXTI_ConfigPortSource</STRONG> (Thumb, 136 bytes, Stack size 8 bytes, bsp_exti.o(i.BSP_EXTI_ConfigPortSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_EXTI_ConfigPortSource &rArr; GPIO_EXTILineConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_InitSingle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Init
</UL>

<P><STRONG><a name="[9b]"></a>BSP_EXTI_GetEXTIIRQn</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, bsp_exti.o(i.BSP_EXTI_GetEXTIIRQn))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_InitSingle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Init
</UL>

<P><STRONG><a name="[99]"></a>BSP_EXTI_GetEXTILine</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, bsp_exti.o(i.BSP_EXTI_GetEXTILine))
<BR><BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_InitSingle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Init
</UL>

<P><STRONG><a name="[98]"></a>BSP_EXTI_Init</STRONG> (Thumb, 142 bytes, Stack size 32 bytes, bsp_exti.o(i.BSP_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSP_EXTI_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_GetEXTILine
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_GetEXTIIRQn
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_ConfigPortSource
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
</UL>

<P><STRONG><a name="[9c]"></a>BSP_EXTI_InitSingle</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, bsp_exti.o(i.BSP_EXTI_InitSingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = BSP_EXTI_InitSingle &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_GetEXTILine
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_GetEXTIIRQn
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_ConfigPortSource
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_PortInit
</UL>

<P><STRONG><a name="[173]"></a>BSP_EXTI_LoadConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_exti.o(i.BSP_EXTI_LoadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_load_config
</UL>

<P><STRONG><a name="[9d]"></a>BSP_EXTI_ReadState</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_exti.o(i.BSP_EXTI_ReadState))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_EXTI_ReadState &rArr; BSP_GPIO_ReadState
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_ReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_read_state
</UL>

<P><STRONG><a name="[9f]"></a>BSP_FLASH_EXT_Erase4K</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_Erase4K))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_FLASH_EXT_Erase4K &rArr; BSP_FLASH_EXT_WriteEnable &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteEnable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteDisable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WaitWriteComplete
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_WriteData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_NssSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_erase_4k
</UL>

<P><STRONG><a name="[a6]"></a>BSP_FLASH_EXT_Init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_FLASH_EXT_Init &rArr; BSP_FLASH_EXT_SPI_PortInit &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_PortInit
</UL>
<BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_init
</UL>

<P><STRONG><a name="[177]"></a>BSP_FLASH_EXT_LoadConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_LoadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_load_config
</UL>

<P><STRONG><a name="[a8]"></a>BSP_FLASH_EXT_ReadBytes</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_ReadBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_WriteData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_ReadData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_NssSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteBytes
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Read_MultiPages_Data
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_read
</UL>

<P><STRONG><a name="[aa]"></a>BSP_FLASH_EXT_ReadID</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_ReadID))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_FLASH_EXT_ReadID &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_WriteData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_ReadData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_NssSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_read_id
</UL>

<P><STRONG><a name="[ab]"></a>BSP_FLASH_EXT_Read_MultiPages_Data</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_Read_MultiPages_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = BSP_FLASH_EXT_Read_MultiPages_Data &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_read
</UL>

<P><STRONG><a name="[ae]"></a>BSP_FLASH_EXT_WriteBytes</STRONG> (Thumb, 158 bytes, Stack size 280 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_WriteBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_ReadBytes
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteEnable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteDisable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WaitWriteComplete
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_WriteData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_NssSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Delay
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Write_MultiPages_Data
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_write
</UL>

<P><STRONG><a name="[b1]"></a>BSP_FLASH_EXT_Write_MultiPages_Data</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_Write_MultiPages_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_write
</UL>

<P><STRONG><a name="[6c]"></a>BSP_GPIO_Init</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, bsp_gpio.o(i.BSP_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Port_Remap
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Pin_Remap
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_PowerOn
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_InitSingle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_PortInit
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_PortInit
</UL>

<P><STRONG><a name="[b3]"></a>BSP_GPIO_Pin_Remap</STRONG> (Thumb, 112 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_GPIO_Pin_Remap))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_ReadState
</UL>

<P><STRONG><a name="[b2]"></a>BSP_GPIO_Port_Remap</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, bsp_gpio.o(i.BSP_GPIO_Port_Remap))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_ReadState
</UL>

<P><STRONG><a name="[9e]"></a>BSP_GPIO_ReadState</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_GPIO_ReadState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GPIO_ReadState
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Port_Remap
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Pin_Remap
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_GetState
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_ReadState
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_ReadData
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_MISO_ReadState
</UL>

<P><STRONG><a name="[93]"></a>BSP_GPIO_SetHigh</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_GPIO_SetHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GPIO_SetHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Port_Remap
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Pin_Remap
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_SendChar
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_Init
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Enable
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Reverse
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Forword
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Brake
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_SckSet
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_NssSet
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_MosiSet
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SCK_SetHigh
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_NSS_SetHigh
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_MOSI_SetHigh
</UL>

<P><STRONG><a name="[90]"></a>BSP_GPIO_SetLow</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, bsp_gpio.o(i.BSP_GPIO_SetLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Port_Remap
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Pin_Remap
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_SendChar
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_PowerOn
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Enable
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Standby
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Reverse
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Forword
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_SckSet
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_NssSet
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_MosiSet
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SCK_SetLow
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_NSS_SetLow
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_MOSI_SetLow
</UL>

<P><STRONG><a name="[b8]"></a>BSP_LCD_Enable</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ht1621.o(i.BSP_LCD_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LCD_Enable &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_WriteData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_WriteCmd
</UL>

<P><STRONG><a name="[b9]"></a>BSP_LCD_Init</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, ht1621.o(i.BSP_LCD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_LCD_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_WriteCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
</UL>

<P><STRONG><a name="[194]"></a>BSP_LCD_LoadConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ht1621.o(i.BSP_LCD_LoadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_load_config
</UL>

<P><STRONG><a name="[bb]"></a>BSP_LCD_Reset</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ht1621.o(i.BSP_LCD_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_LCD_Reset &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_WriteData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_WriteCmd
</UL>

<P><STRONG><a name="[bc]"></a>BSP_LCD_Write</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, ht1621.o(i.BSP_LCD_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_WriteData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_WriteCmd
</UL>

<P><STRONG><a name="[ba]"></a>BSP_LCD_WriteCmd</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, ht1621.o(i.BSP_LCD_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BSP_LCD_WriteCmd &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>

<P><STRONG><a name="[be]"></a>BSP_LCD_WriteData</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, ht1621.o(i.BSP_LCD_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HT1621BitRev
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Write
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Reset
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_screen
</UL>

<P><STRONG><a name="[c0]"></a>BSP_LED_Init</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, bsp_led.o(i.BSP_LED_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = BSP_LED_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
</UL>

<P><STRONG><a name="[195]"></a>BSP_LED_LoadConfig</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bsp_led.o(i.BSP_LED_LoadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_load_config
</UL>

<P><STRONG><a name="[c1]"></a>BSP_LED_Off</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_led.o(i.BSP_LED_Off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_Off &rArr; BSP_GPIO_SetHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>

<P><STRONG><a name="[c2]"></a>BSP_LED_On</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bsp_led.o(i.BSP_LED_On))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_LED_On &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
</UL>

<P><STRONG><a name="[c3]"></a>BSP_MOTOR_Brake</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ba6289.o(i.BSP_MOTOR_Brake))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_MOTOR_Brake &rArr; BSP_GPIO_SetHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Stop
</UL>

<P><STRONG><a name="[c4]"></a>BSP_MOTOR_Forword</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ba6289.o(i.BSP_MOTOR_Forword))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_MOTOR_Forword &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Run
</UL>

<P><STRONG><a name="[c5]"></a>BSP_MOTOR_GetState</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, ba6289.o(i.BSP_MOTOR_GetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_MOTOR_GetState &rArr; BSP_GPIO_ReadState
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_ReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_state
</UL>

<P><STRONG><a name="[c6]"></a>BSP_MOTOR_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, ba6289.o(i.BSP_MOTOR_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = BSP_MOTOR_Init &rArr; BSP_ADC_InitSingle &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
</UL>

<P><STRONG><a name="[19a]"></a>BSP_MOTOR_LoadConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ba6289.o(i.BSP_MOTOR_LoadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_load_config
</UL>

<P><STRONG><a name="[c7]"></a>BSP_MOTOR_Reverse</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ba6289.o(i.BSP_MOTOR_Reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_MOTOR_Reverse &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Run
</UL>

<P><STRONG><a name="[c8]"></a>BSP_MOTOR_Run</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, ba6289.o(i.BSP_MOTOR_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_MOTOR_Run &rArr; BSP_MOTOR_Reverse &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Reverse
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Forword
</UL>
<BR>[Called By]<UL><LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_run
</UL>

<P><STRONG><a name="[c9]"></a>BSP_MOTOR_Standby</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, ba6289.o(i.BSP_MOTOR_Standby))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_MOTOR_Standby &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Stop
</UL>

<P><STRONG><a name="[ca]"></a>BSP_MOTOR_Stop</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ba6289.o(i.BSP_MOTOR_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_MOTOR_Stop &rArr; BSP_MOTOR_Standby &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Standby
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Brake
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
</UL>

<P><STRONG><a name="[cb]"></a>BSP_RF_ISR</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, si4432.o(i.BSP_RF_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = BSP_RF_ISR &rArr; BSP_RF_SetRxMode &rArr; BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetRxMode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetIdleMode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ResetRxFIFO
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_isr
</UL>

<P><STRONG><a name="[d0]"></a>BSP_RF_Init</STRONG> (Thumb, 286 bytes, Stack size 24 bytes, si4432.o(i.BSP_RF_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = BSP_RF_Init &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetRxMode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetFre
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_RecvInit
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetDataRate
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ReadRegister
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_PortInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
</UL>

<P><STRONG><a name="[1b3]"></a>BSP_RF_LoadConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, si4432.o(i.BSP_RF_LoadConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_RF_LoadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_load_config
</UL>

<P><STRONG><a name="[d7]"></a>BSP_RF_MISO_ReadState</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si4432.o(i.BSP_RF_MISO_ReadState))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_RF_MISO_ReadState &rArr; BSP_GPIO_ReadState
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_ReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ReadRegister
</UL>

<P><STRONG><a name="[d8]"></a>BSP_RF_MOSI_SetHigh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si4432.o(i.BSP_RF_MOSI_SetHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_RF_MOSI_SetHigh &rArr; BSP_GPIO_SetHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ReadRegister
</UL>

<P><STRONG><a name="[d9]"></a>BSP_RF_MOSI_SetLow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si4432.o(i.BSP_RF_MOSI_SetLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_RF_MOSI_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ReadRegister
</UL>

<P><STRONG><a name="[da]"></a>BSP_RF_NSS_SetHigh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si4432.o(i.BSP_RF_NSS_SetHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_RF_NSS_SetHigh &rArr; BSP_GPIO_SetHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ReadRegister
</UL>

<P><STRONG><a name="[db]"></a>BSP_RF_NSS_SetLow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si4432.o(i.BSP_RF_NSS_SetLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_RF_NSS_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ReadRegister
</UL>

<P><STRONG><a name="[d1]"></a>BSP_RF_PortInit</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, si4432.o(i.BSP_RF_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = BSP_RF_PortInit &rArr; BSP_EXTI_InitSingle &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_InitSingle
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_Init
</UL>

<P><STRONG><a name="[dc]"></a>BSP_RF_PowerOn</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, si4432.o(i.BSP_RF_PowerOn))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_RF_PowerOn &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_power_on
</UL>

<P><STRONG><a name="[cc]"></a>BSP_RF_ReadRegister</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, si4432.o(i.BSP_RF_ReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_RF_ReadRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SCK_SetLow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SCK_SetHigh
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_NSS_SetLow
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_NSS_SetHigh
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_MOSI_SetLow
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_MOSI_SetHigh
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_MISO_ReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetRxMode
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ISR
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetTxMode
</UL>

<P><STRONG><a name="[1b4]"></a>BSP_RF_RecvData</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, si4432.o(i.BSP_RF_RecvData))
<BR><BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rcv_data
</UL>

<P><STRONG><a name="[d6]"></a>BSP_RF_RecvInit</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, si4432.o(i.BSP_RF_RecvInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_RF_RecvInit
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rcv_init
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_Init
</UL>

<P><STRONG><a name="[ce]"></a>BSP_RF_ResetRxFIFO</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, si4432.o(i.BSP_RF_ResetRxFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_RF_ResetRxFIFO &rArr; BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ISR
</UL>

<P><STRONG><a name="[df]"></a>BSP_RF_ResetTxFIFO</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, si4432.o(i.BSP_RF_ResetTxFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_RF_ResetTxFIFO &rArr; BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SendData
</UL>

<P><STRONG><a name="[de]"></a>BSP_RF_SCK_SetHigh</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si4432.o(i.BSP_RF_SCK_SetHigh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_RF_SCK_SetHigh &rArr; BSP_GPIO_SetHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ReadRegister
</UL>

<P><STRONG><a name="[dd]"></a>BSP_RF_SCK_SetLow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, si4432.o(i.BSP_RF_SCK_SetLow))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ReadRegister
</UL>

<P><STRONG><a name="[e0]"></a>BSP_RF_SendData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, si4432.o(i.BSP_RF_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_RF_SendData &rArr; BSP_RF_SetTxMode &rArr; BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetIdleMode
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetTxMode
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ResetTxFIFO
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_snd_data
</UL>

<P><STRONG><a name="[d5]"></a>BSP_RF_SetDataRate</STRONG> (Thumb, 1058 bytes, Stack size 8 bytes, si4432.o(i.BSP_RF_SetDataRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_RF_SetDataRate &rArr; BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_Init
</UL>

<P><STRONG><a name="[d4]"></a>BSP_RF_SetFre</STRONG> (Thumb, 110 bytes, Stack size 8 bytes, si4432.o(i.BSP_RF_SetFre))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_RF_SetFre &rArr; BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_Init
</UL>

<P><STRONG><a name="[cd]"></a>BSP_RF_SetIdleMode</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, si4432.o(i.BSP_RF_SetIdleMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_RF_SetIdleMode &rArr; BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SendData
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ISR
</UL>

<P><STRONG><a name="[cf]"></a>BSP_RF_SetRxMode</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, si4432.o(i.BSP_RF_SetRxMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_RF_SetRxMode &rArr; BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_Init
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ISR
</UL>

<P><STRONG><a name="[e1]"></a>BSP_RF_SetTxMode</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, si4432.o(i.BSP_RF_SetTxMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_RF_SetTxMode &rArr; BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_WriteRegister
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SendData
</UL>

<P><STRONG><a name="[d3]"></a>BSP_RF_WriteRegister</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, si4432.o(i.BSP_RF_WriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SCK_SetLow
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SCK_SetHigh
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_NSS_SetLow
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_NSS_SetHigh
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_MOSI_SetLow
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_MOSI_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetRxMode
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetIdleMode
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetFre
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SendData
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ResetRxFIFO
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_Init
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetTxMode
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SetDataRate
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ResetTxFIFO
</UL>

<P><STRONG><a name="[e2]"></a>BSP_RTC_Config</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, bsp_rtc.o(i.BSP_RTC_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BSP_RTC_Config &rArr; BKP_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[ec]"></a>BSP_RTC_Init</STRONG> (Thumb, 142 bytes, Stack size 96 bytes, bsp_rtc.o(i.BSP_RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = BSP_RTC_Init &rArr; BSP_RTC_Write &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Write
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ClearFlag
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ITConfig
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupRegister
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupRegister
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Config
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
</UL>

<P><STRONG><a name="[f2]"></a>BSP_RTC_Read</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, bsp_rtc.o(i.BSP_RTC_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_RTC_Read &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
</UL>

<P><STRONG><a name="[ef]"></a>BSP_RTC_Write</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, bsp_rtc.o(i.BSP_RTC_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = BSP_RTC_Write &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCmd
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mktime
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[1b5]"></a>BSP_SysTimer_ISR</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, bsp_systimer.o(i.BSP_SysTimer_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_SysTimer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systimer_isr
</UL>

<P><STRONG><a name="[f5]"></a>BSP_WDG_Init</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, bsp_wdg.o(i.BSP_WDG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = BSP_WDG_Init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdg_init
</UL>

<P><STRONG><a name="[fb]"></a>BSP_WDG_Reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bsp_wdg.o(i.BSP_WDG_Reset))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdg_reset
</UL>

<P><STRONG><a name="[4]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fc]"></a>Check_RTC</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, vtask_calculate.o(i.Check_RTC))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Check_RTC &rArr; save_params &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_clr
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_params
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Calculate
</UL>

<P><STRONG><a name="[101]"></a>DELAY_MS</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, board.o(i.DELAY_MS))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DELAY_MS
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_poll
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[71]"></a>DMA_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[6f]"></a>DMA_DeInit</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, stm32f10x_dma.o(i.DMA_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[70]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, stm32f10x_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[7]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EXTI15_10_IRQHandler &rArr; exti_read_state &rArr; BSP_EXTI_ReadState &rArr; BSP_GPIO_ReadState
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_read_state
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = EXTI1_IRQHandler &rArr; rf_isr &rArr; BSP_RF_ISR &rArr; BSP_RF_SetRxMode &rArr; BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_isr
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, stm32f10x_it.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[104]"></a>EXTI_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_isr
</UL>

<P><STRONG><a name="[146]"></a>EXTI_DeInit</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_DeInit))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_init
</UL>

<P><STRONG><a name="[102]"></a>EXTI_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
</UL>

<P><STRONG><a name="[9a]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, stm32f10x_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_InitSingle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Init
</UL>

<P><STRONG><a name="[147]"></a>EXTI_StructInit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_exti.o(i.EXTI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_init
</UL>

<P><STRONG><a name="[97]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, stm32f10x_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_ConfigPortSource
</UL>

<P><STRONG><a name="[b4]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
</UL>

<P><STRONG><a name="[8a]"></a>GPIO_PinRemapConfig</STRONG> (Thumb, 82 bytes, Stack size 20 bytes, stm32f10x_gpio.o(i.GPIO_PinRemapConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_PinRemapConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[b5]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_ReadState
</UL>

<P><STRONG><a name="[b7]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
</UL>

<P><STRONG><a name="[b6]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>

<P><STRONG><a name="[bf]"></a>HT1621BitRev</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, ht1621.o(i.HT1621BitRev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HT1621BitRev
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_WriteData
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[fa]"></a>IWDG_Enable</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDG_Init
</UL>

<P><STRONG><a name="[f9]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDG_Reset
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDG_Init
</UL>

<P><STRONG><a name="[f7]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDG_Init
</UL>

<P><STRONG><a name="[f8]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDG_Init
</UL>

<P><STRONG><a name="[f6]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_iwdg.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDG_Init
</UL>

<P><STRONG><a name="[106]"></a>MYLOG_DEBUG</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, dbg.o(i.MYLOG_DEBUG))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MYLOG_DEBUG &rArr; debug_info &rArr; rtc_read &rArr; BSP_RTC_Read &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_params
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf433_init
</UL>

<P><STRONG><a name="[159]"></a>MYLOG_LEVEL</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dbg.o(i.MYLOG_LEVEL))
<BR><BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
</UL>

<P><STRONG><a name="[3]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_InitSingle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Init
</UL>

<P><STRONG><a name="[60]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Init
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_init
</UL>

<P><STRONG><a name="[b]"></a>PVD_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f10x_it.o(i.PVD_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PVD_IRQHandler &rArr; pvd_isr &rArr; bsp_pvd_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvd_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[e3]"></a>PWR_BackupAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_BackupAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Write
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Config
</UL>

<P><STRONG><a name="[14b]"></a>PWR_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_isr
</UL>

<P><STRONG><a name="[149]"></a>PWR_PVDCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_PVDCmd))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_init
</UL>

<P><STRONG><a name="[148]"></a>PWR_PVDLevelConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_pwr.o(i.PWR_PVDLevelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_init
</UL>

<P><STRONG><a name="[109]"></a>Power_detect</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, vtask_power_display_temp_runled.o(i.Power_detect))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Power_detect &rArr; disp_battery_state &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_read_state
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;soft_reset
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvd_get_state
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_triggered
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_battery_state
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Power_Display_Temp_Runled
</UL>

<P><STRONG><a name="[6b]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[6e]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[62]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Write
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Config
</UL>

<P><STRONG><a name="[11c]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[6d]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_InitSingle
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Init
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_InitSingle
</UL>

<P><STRONG><a name="[11b]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_DeInit
</UL>

<P><STRONG><a name="[68]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_BackupResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_DeInit
</UL>

<P><STRONG><a name="[f1]"></a>RCC_ClearFlag</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>

<P><STRONG><a name="[11d]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 128 bytes, Stack size 12 bytes, stm32f10x_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[e5]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Config
</UL>

<P><STRONG><a name="[e4]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Config
</UL>

<P><STRONG><a name="[e7]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Config
</UL>

<P><STRONG><a name="[e6]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Config
</UL>

<P><STRONG><a name="[110]"></a>RTC_ClearITPendingBit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[111]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[112]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetPrescaler
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[f3]"></a>RTC_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Read
</UL>

<P><STRONG><a name="[10f]"></a>RTC_GetITStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
</UL>

<P><STRONG><a name="[d]"></a>RTC_IRQHandler</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_rtc.o(i.RTC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = RTC_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetITStatus
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>RTC_ITConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Config
</UL>

<P><STRONG><a name="[f4]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Write
</UL>

<P><STRONG><a name="[eb]"></a>RTC_SetPrescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, stm32f10x_rtc.o(i.RTC_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Config
</UL>

<P><STRONG><a name="[e9]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Write
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_IRQHandler
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Config
</UL>

<P><STRONG><a name="[e8]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f10x_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Config
</UL>

<P><STRONG><a name="[113]"></a>RecordValveTime</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, valve_deal.o(i.RecordValveTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = RecordValveTime &rArr; save_params &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_params
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_action
</UL>

<P><STRONG><a name="[9]"></a>SysTick_Handler</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, stm32f10x_it.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SysTick_Handler &rArr; xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetSchedulerState
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;systimer_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>SystemInit</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, system_stm32f10x.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClockTo72
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo72
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(.text)
</UL>
<P><STRONG><a name="[27]"></a>TIM3_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, stm32f10x_it.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Init
</UL>

<P><STRONG><a name="[119]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[66]"></a>TIM_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Init
</UL>

<P><STRONG><a name="[118]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
</UL>

<P><STRONG><a name="[65]"></a>TIM_ITConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f10x_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Init
</UL>

<P><STRONG><a name="[63]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, stm32f10x_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Init
</UL>

<P><STRONG><a name="[2f]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; com_isr &rArr; BSP_COM_ISR &rArr; BSP_COM3_ISR &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>USART3_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_it.o(i.USART3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART3_IRQHandler &rArr; com_isr &rArr; BSP_COM_ISR &rArr; BSP_COM3_ISR &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>USART_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM3_ISR
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM2_ISR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM1_ISR
</UL>

<P><STRONG><a name="[83]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM3_ISR
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM2_ISR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM1_ISR
</UL>

<P><STRONG><a name="[8e]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[8b]"></a>USART_DeInit</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[81]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, stm32f10x_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM3_ISR
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM2_ISR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM1_ISR
</UL>

<P><STRONG><a name="[8d]"></a>USART_ITConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, stm32f10x_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[8c]"></a>USART_Init</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, stm32f10x_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[82]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM3_ISR
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM2_ISR
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM1_ISR
</UL>

<P><STRONG><a name="[94]"></a>USART_SendData</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f10x_usart.o(i.USART_SendData))
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_SendChar
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
</UL>

<P><STRONG><a name="[5]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f10x_it.o(i.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_md.o(RESET)
</UL>
<P><STRONG><a name="[11e]"></a>__0printf</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d6]"></a>__1printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[1d7]"></a>__2printf$full</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[15b]"></a>__c89printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89printf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>

<P><STRONG><a name="[1d8]"></a>printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0printf), UNUSED)

<P><STRONG><a name="[120]"></a>__0printf$8</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d9]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[5c]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRunTimeStats
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskExitError
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_Init
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_PortInit
</UL>

<P><STRONG><a name="[122]"></a>__0sprintf$8</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1da]"></a>__1sprintf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8), UNUSED)

<P><STRONG><a name="[132]"></a>__2sprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0sprintf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_return
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_inlet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_difference
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>

<P><STRONG><a name="[123]"></a>__0vsprintf</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1db]"></a>__1vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1dc]"></a>__2vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[15c]"></a>__c89vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __c89vsprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>

<P><STRONG><a name="[1dd]"></a>vsprintf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printfa.o(i.__0vsprintf), UNUSED)

<P><STRONG><a name="[1de]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1df]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1e0]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[12b]"></a>adc_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc.o(i.adc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = adc_init &rArr; BSP_ADC_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temp
</UL>

<P><STRONG><a name="[12c]"></a>adc_load_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adc.o(i.adc_load_config))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_LoadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[12e]"></a>adc_sample</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, adc.o(i.adc_sample))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = adc_sample &rArr; BSP_ADC_SampleOnce
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_ADC_SampleOnce
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temp
</UL>

<P><STRONG><a name="[12f]"></a>auto_test</STRONG> (Thumb, 2320 bytes, Stack size 136 bytes, vtaskruntimestats.o(i.auto_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 552<LI>Call Chain = auto_test &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_state
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_poll
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_snd_data
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rcv_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rcv_data
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_data
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_triggered
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf433_init
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_return
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_inlet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_difference
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRunTimeStats
</UL>

<P><STRONG><a name="[1b1]"></a>bsp_pvd_get_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bsp_pvd.o(i.bsp_pvd_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvd_get_state
</UL>

<P><STRONG><a name="[145]"></a>bsp_pvd_init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, bsp_pvd.o(i.bsp_pvd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = bsp_pvd_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_StructInit
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_DeInit
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDLevelConfig
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_PVDCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvd_init
</UL>

<P><STRONG><a name="[14a]"></a>bsp_pvd_isr</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_pvd.o(i.bsp_pvd_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bsp_pvd_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearITPendingBit
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvd_isr
</UL>

<P><STRONG><a name="[17f]"></a>bytes_reverse</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, utili.o(i.bytes_reverse))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bytes_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_unpack
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_response
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_request
</UL>

<P><STRONG><a name="[185]"></a>check_sum</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, check.o(i.check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_unpack
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_pack
</UL>

<P><STRONG><a name="[14c]"></a>collect_temp</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, vtask_power_display_temp_runled.o(i.collect_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = collect_temp &rArr; read_temp &rArr; adc_init &rArr; BSP_ADC_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_clr
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temp
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Power_Display_Temp_Runled
</UL>

<P><STRONG><a name="[14e]"></a>com_init</STRONG> (Thumb, 26 bytes, Stack size 40 bytes, com.o(i.com_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = com_init &rArr; BSP_COM_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[11a]"></a>com_isr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com.o(i.com_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = com_isr &rArr; BSP_COM_ISR &rArr; BSP_COM3_ISR &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART3_IRQHandler
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[14f]"></a>com_load_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com.o(i.com_load_config))
<BR><BR>[Calls]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_LoadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[13e]"></a>com_recv_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com.o(i.com_recv_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = com_recv_data &rArr; BSP_COM_RecvData
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_RecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
</UL>

<P><STRONG><a name="[152]"></a>com_recv_data_deal</STRONG> (Thumb, 542 bytes, Stack size 32 bytes, recv_data_deal.o(i.com_recv_data_deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = com_recv_data_deal &rArr; fy_protocol_func_request &rArr; sys_factory_reset &rArr; save_params &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_params
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYLOG_LEVEL
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_snd_data
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rcv_init
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rcv_data
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_data
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_init
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_triggered
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_unpack
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_pack
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_response
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_request
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncmp
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Com_Rf_Valve
</UL>

<P><STRONG><a name="[13f]"></a>com_recv_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com.o(i.com_recv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = com_recv_init &rArr; BSP_COM_RecvInit &rArr; BSP_COM_GetComIdx
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_RecvInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
</UL>

<P><STRONG><a name="[15a]"></a>com_send_char</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com.o(i.com_send_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = com_send_char &rArr; BSP_COM_SendChar &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_SendChar
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[13d]"></a>com_send_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, com.o(i.com_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = com_send_data &rArr; BSP_COM_SendData &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
</UL>

<P><STRONG><a name="[107]"></a>debug_info</STRONG> (Thumb, 160 bytes, Stack size 80 bytes, dbg.o(i.debug_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = debug_info &rArr; rtc_read &rArr; BSP_RTC_Read &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsprintf
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89printf
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYLOG_DEBUG
</UL>

<P><STRONG><a name="[183]"></a>dec_2_hex_type</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, utili.o(i.dec_2_hex_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = dec_2_hex_type
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_response
</UL>

<P><STRONG><a name="[bd]"></a>delay_us</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, delay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_WriteData
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_WriteCmd
</UL>

<P><STRONG><a name="[10a]"></a>disp_battery_state</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, display.o(i.disp_battery_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = disp_battery_state &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_detect
</UL>

<P><STRONG><a name="[15f]"></a>disp_char</STRONG> (Thumb, 162 bytes, Stack size 0 bytes, display.o(i.disp_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disp_char &rArr; disp_digit
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
</UL>

<P><STRONG><a name="[10e]"></a>disp_clear</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, display.o(i.disp_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = disp_clear &rArr; disp_update &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_update
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_poll
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_detect
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_return
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_inlet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_difference
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_systime_year_mon_day
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_systime_hour_min_sec
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_sys_fault
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_id
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_heat_quantity
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_gn_id
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_connect_sum_time
</UL>

<P><STRONG><a name="[162]"></a>disp_connect_sum_time</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, display.o(i.disp_connect_sum_time))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = disp_connect_sum_time &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_number
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
</UL>

<P><STRONG><a name="[160]"></a>disp_digit</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, display.o(i.disp_digit))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = disp_digit
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_number
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_char
</UL>

<P><STRONG><a name="[164]"></a>disp_gn_id</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, display.o(i.disp_gn_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = disp_gn_id &rArr; disp_str &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
</UL>

<P><STRONG><a name="[166]"></a>disp_heat_quantity</STRONG> (Thumb, 128 bytes, Stack size 16 bytes, display.o(i.disp_heat_quantity))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = disp_heat_quantity &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_number
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
</UL>

<P><STRONG><a name="[167]"></a>disp_id</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, display.o(i.disp_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = disp_id &rArr; disp_str &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
</UL>

<P><STRONG><a name="[163]"></a>disp_number</STRONG> (Thumb, 174 bytes, Stack size 48 bytes, display.o(i.disp_number))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_screen
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_sys_version
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_return
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_inlet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_difference
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_systime_year_mon_day
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_systime_hour_min_sec
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_sys_fault
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_heat_quantity
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_connect_sum_time
</UL>

<P><STRONG><a name="[131]"></a>disp_poll</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, display.o(i.disp_poll))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = disp_poll &rArr; disp_clear &rArr; disp_update &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
</UL>

<P><STRONG><a name="[168]"></a>disp_signal_state</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, display.o(i.disp_signal_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = disp_signal_state &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
</UL>

<P><STRONG><a name="[133]"></a>disp_str</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, display.o(i.disp_str))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = disp_str &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_screen
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_number
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_char
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_sys_version
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_return
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_inlet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_difference
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_systime_year_mon_day
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_systime_hour_min_sec
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_id
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_gn_id
</UL>

<P><STRONG><a name="[16a]"></a>disp_sys_fault</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, display.o(i.disp_sys_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = disp_sys_fault &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_sys_fault_flag
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_number
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
</UL>

<P><STRONG><a name="[16b]"></a>disp_sys_fault_flag</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, display.o(i.disp_sys_fault_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = disp_sys_fault_flag &rArr; lcd_write_seg
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_sys_fault
</UL>

<P><STRONG><a name="[16c]"></a>disp_sys_version</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, display.o(i.disp_sys_version))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = disp_sys_version &rArr; disp_str &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_screen
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_number
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[16d]"></a>disp_systime_hour_min_sec</STRONG> (Thumb, 78 bytes, Stack size 48 bytes, display.o(i.disp_systime_hour_min_sec))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = disp_systime_hour_min_sec &rArr; disp_str &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_number
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
</UL>

<P><STRONG><a name="[16e]"></a>disp_systime_year_mon_day</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, display.o(i.disp_systime_year_mon_day))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = disp_systime_year_mon_day &rArr; disp_str &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_number
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
</UL>

<P><STRONG><a name="[13a]"></a>disp_temp_difference</STRONG> (Thumb, 164 bytes, Stack size 32 bytes, display.o(i.disp_temp_difference))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = disp_temp_difference &rArr; disp_str &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_number
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
</UL>

<P><STRONG><a name="[138]"></a>disp_temp_inlet</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, display.o(i.disp_temp_inlet))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = disp_temp_inlet &rArr; disp_str &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_number
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
</UL>

<P><STRONG><a name="[139]"></a>disp_temp_return</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, display.o(i.disp_temp_return))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = disp_temp_return &rArr; disp_str &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_number
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
</UL>

<P><STRONG><a name="[161]"></a>disp_update</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, display.o(i.disp_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = disp_update &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
</UL>

<P><STRONG><a name="[16f]"></a>disp_valve_state</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, display.o(i.disp_valve_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = disp_valve_state &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_write_seg
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_update_screen
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_action
</UL>

<P><STRONG><a name="[170]"></a>eTaskGetState</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, tasks.o(i.eTaskGetState))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = eTaskGetState &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>

<P><STRONG><a name="[ff]"></a>error_clr</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, error.o(i.error_clr))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_params
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_RTC
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_temp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_action
</UL>

<P><STRONG><a name="[fe]"></a>error_set</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, error.o(i.error_set))
<BR><BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_params
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_RTC
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_temp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_action
</UL>

<P><STRONG><a name="[171]"></a>exti_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.exti_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = exti_init &rArr; BSP_EXTI_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[172]"></a>exti_load_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.exti_load_config))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_LoadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[103]"></a>exti_read_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, exti.o(i.exti_read_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = exti_read_state &rArr; BSP_EXTI_ReadState &rArr; BSP_GPIO_ReadState
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_EXTI_ReadState
</UL>
<BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_detect
</UL>

<P><STRONG><a name="[174]"></a>flash_ext_erase_4k</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash_ext.o(i.flash_ext_erase_4k))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_ext_erase_4k &rArr; BSP_FLASH_EXT_Erase4K &rArr; BSP_FLASH_EXT_WriteEnable &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Erase4K
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
</UL>

<P><STRONG><a name="[175]"></a>flash_ext_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash_ext.o(i.flash_ext_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = flash_ext_init &rArr; BSP_FLASH_EXT_Init &rArr; BSP_FLASH_EXT_SPI_PortInit &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[176]"></a>flash_ext_load_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash_ext.o(i.flash_ext_load_config))
<BR><BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_LoadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[178]"></a>flash_ext_read</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, flash_ext.o(i.flash_ext_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = flash_ext_read &rArr; BSP_FLASH_EXT_Read_MultiPages_Data &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Read_MultiPages_Data
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_ReadBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_load
</UL>

<P><STRONG><a name="[179]"></a>flash_ext_read_id</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, flash_ext.o(i.flash_ext_read_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = flash_ext_read_id &rArr; BSP_FLASH_EXT_ReadID &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_ReadID
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[17a]"></a>flash_ext_write</STRONG> (Thumb, 158 bytes, Stack size 32 bytes, flash_ext.o(i.flash_ext_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 384<LI>Call Chain = flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Write_MultiPages_Data
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteBytes
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
</UL>

<P><STRONG><a name="[3c]"></a>fputc</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, printf.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; com_send_char &rArr; BSP_COM_SendChar &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_send_char
</UL>
<BR>[Address Reference Count : 2]<UL><LI> printf8.o(i.__0printf$8)
<LI> printfa.o(i.__0printf)
</UL>
<P><STRONG><a name="[17b]"></a>fs_load</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, filesystem.o(i.fs_load))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = fs_load &rArr; flash_ext_read &rArr; BSP_FLASH_EXT_Read_MultiPages_Data &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_read
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_eof
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[17d]"></a>fs_mount</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, filesystem.o(i.fs_mount))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fs_mount
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[13c]"></a>fs_read</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, filesystem.o(i.fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = fs_read &rArr; flash_ext_read &rArr; BSP_FLASH_EXT_Read_MultiPages_Data &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_read
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_exsit
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
</UL>

<P><STRONG><a name="[13b]"></a>fs_write</STRONG> (Thumb, 184 bytes, Stack size 32 bytes, filesystem.o(i.fs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_write
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_erase_4k
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_exsit
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_params
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
</UL>

<P><STRONG><a name="[154]"></a>fy_protocol_func_request</STRONG> (Thumb, 1742 bytes, Stack size 112 bytes, fy_protocol.o(i.fy_protocol_func_request))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = fy_protocol_func_request &rArr; sys_factory_reset &rArr; save_params &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_params
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_triggered
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf433_init
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_2_dec_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_reverse
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
</UL>

<P><STRONG><a name="[155]"></a>fy_protocol_func_response</STRONG> (Thumb, 1566 bytes, Stack size 80 bytes, fy_protocol.o(i.fy_protocol_func_response))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = fy_protocol_func_response &rArr; rtc_read &rArr; BSP_RTC_Read &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dec_2_hex_type
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
</UL>

<P><STRONG><a name="[156]"></a>fy_protocol_pack</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, fy_protocol.o(i.fy_protocol_pack))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = fy_protocol_pack &rArr; check_sum
</UL>
<BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
</UL>

<P><STRONG><a name="[153]"></a>fy_protocol_unpack</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, fy_protocol.o(i.fy_protocol_unpack))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = fy_protocol_unpack &rArr; hex_2_dec_type
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_2_dec_type
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;check_sum
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bytes_reverse
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
</UL>

<P><STRONG><a name="[186]"></a>hardware_init</STRONG> (Thumb, 450 bytes, Stack size 96 bytes, main.o(i.hardware_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = hardware_init &rArr; motor_init &rArr; BSP_MOTOR_Init &rArr; BSP_ADC_InitSingle &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_init
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_power_on
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_load_config
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvd_init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvd_get_state
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_run
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_load_config
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_init
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_state
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_load_config
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_init
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_load_config
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_init
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_mount
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_load
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_read_id
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_load_config
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_ext_init
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_load_config
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exti_init
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_signal_state
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_poll
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_clear
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_load_config
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_init
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_load_config
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYLOG_LEVEL
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYLOG_DEBUG
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinRemapConfig
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[192]"></a>heating_period</STRONG> (Thumb, 104 bytes, Stack size 64 bytes, vtask_calculate.o(i.heating_period))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = heating_period &rArr; rtc_read &rArr; BSP_RTC_Read &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Calculate
</UL>

<P><STRONG><a name="[180]"></a>hex_2_dec_type</STRONG> (Thumb, 56 bytes, Stack size 12 bytes, utili.o(i.hex_2_dec_type))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = hex_2_dec_type
</UL>
<BR>[Called By]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_unpack
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_request
</UL>

<P><STRONG><a name="[17c]"></a>is_eof</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, filesystem.o(i.is_eof))
<BR><BR>[Called By]<UL><LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_load
</UL>

<P><STRONG><a name="[17e]"></a>is_exsit</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, filesystem.o(i.is_exsit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = is_exsit
</UL>
<BR>[Called By]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
</UL>

<P><STRONG><a name="[193]"></a>lcd_disp_menu</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, vtask_power_display_temp_runled.o(i.lcd_disp_menu))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lcd_disp_menu &rArr; disp_systime_year_mon_day &rArr; disp_str &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_signal_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_return
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_inlet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_difference
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_systime_year_mon_day
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_systime_hour_min_sec
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_sys_fault_flag
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_sys_fault
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_id
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_heat_quantity
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_gn_id
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_connect_sum_time
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Power_Display_Temp_Runled
</UL>

<P><STRONG><a name="[18c]"></a>lcd_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd.o(i.lcd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lcd_init &rArr; BSP_LCD_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[18b]"></a>lcd_load_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lcd.o(i.lcd_load_config))
<BR><BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_LoadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[15e]"></a>lcd_update_screen</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lcd.o(i.lcd_update_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LCD_WriteData
</UL>
<BR>[Called By]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_sys_version
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_signal_state
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_poll
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_valve_state
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_update
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_str
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_number
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_battery_state
</UL>

<P><STRONG><a name="[15d]"></a>lcd_write_seg</STRONG> (Thumb, 24 bytes, Stack size 12 bytes, lcd.o(i.lcd_write_seg))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lcd_write_seg
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_signal_state
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_valve_state
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_return
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_inlet
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_temp_difference
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_systime_year_mon_day
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_systime_hour_min_sec
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_sys_fault_flag
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_id
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_heat_quantity
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_gn_id
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_connect_sum_time
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_battery_state
</UL>

<P><STRONG><a name="[18a]"></a>led_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led.o(i.led_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = led_init &rArr; BSP_LED_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[189]"></a>led_load_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led.o(i.led_load_config))
<BR><BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_LoadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[135]"></a>led_off</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led.o(i.led_off))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_off &rArr; BSP_LED_Off &rArr; BSP_GPIO_SetHigh
</UL>
<BR>[Calls]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_Off
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_state
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_action_LED_twinkle
</UL>

<P><STRONG><a name="[136]"></a>led_on</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, led.o(i.led_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = led_on &rArr; BSP_LED_On &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_LED_On
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_state
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_action_LED_twinkle
</UL>

<P><STRONG><a name="[196]"></a>led_run_state</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vtask_power_display_temp_runled.o(i.led_run_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = led_run_state &rArr; led_on &rArr; BSP_LED_On &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Power_Display_Temp_Runled
</UL>

<P><STRONG><a name="[35]"></a>main</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 600<LI>Call Chain = main &rArr; software_init &rArr; sys_factory_reset &rArr; save_params &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdg_init
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_sys_version
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BASIC_TIM_Init
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DELAY_MS
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[137]"></a>motor_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motor.o(i.motor_get_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_get_state &rArr; BSP_MOTOR_GetState &rArr; BSP_GPIO_ReadState
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_GetState
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_action
</UL>

<P><STRONG><a name="[190]"></a>motor_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motor.o(i.motor_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = motor_init &rArr; BSP_MOTOR_Init &rArr; BSP_ADC_InitSingle &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[18f]"></a>motor_load_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motor.o(i.motor_load_config))
<BR><BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_LoadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[191]"></a>motor_run</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motor.o(i.motor_run))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_run &rArr; BSP_MOTOR_Run &rArr; BSP_MOTOR_Reverse &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Run
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_action
</UL>

<P><STRONG><a name="[19b]"></a>motor_stop</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, motor.o(i.motor_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = motor_stop &rArr; BSP_MOTOR_Stop &rArr; BSP_MOTOR_Standby &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_MOTOR_Stop
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_action
</UL>

<P><STRONG><a name="[1ae]"></a>pvPortMalloc</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, heap_4.o(i.pvPortMalloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvHeapInit
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[10d]"></a>pvd_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pvd.o(i.pvd_get_state))
<BR><BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_get_state
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_detect
</UL>

<P><STRONG><a name="[187]"></a>pvd_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pvd.o(i.pvd_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = pvd_init &rArr; bsp_pvd_init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[108]"></a>pvd_isr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pvd.o(i.pvd_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pvd_isr &rArr; bsp_pvd_isr
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bsp_pvd_isr
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PVD_IRQHandler
</UL>

<P><STRONG><a name="[1a9]"></a>pxPortInitialiseStack</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, port.o(i.pxPortInitialiseStack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = pxPortInitialiseStack
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[1b2]"></a>query_temp_by_resistance</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, vtask_power_display_temp_runled.o(i.query_temp_by_resistance))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = query_temp_by_resistance &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_temp
</UL>

<P><STRONG><a name="[14d]"></a>read_temp</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, vtask_power_display_temp_runled.o(i.read_temp))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = read_temp &rArr; adc_init &rArr; BSP_ADC_Init &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_sample
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adc_init
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;query_temp_by_resistance
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_temp
</UL>

<P><STRONG><a name="[144]"></a>rf433_init</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vtask_com_rf_valve.o(i.rf433_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = rf433_init &rArr; MYLOG_DEBUG &rArr; debug_info &rArr; rtc_read &rArr; BSP_RTC_Read &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYLOG_DEBUG
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf_rcv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Com_Rf_Valve
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Calculate
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_request
</UL>

<P><STRONG><a name="[140]"></a>rf_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf.o(i.rf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = rf_init &rArr; BSP_RF_Init &rArr; vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf433_init
</UL>

<P><STRONG><a name="[105]"></a>rf_isr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf.o(i.rf_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_isr &rArr; BSP_RF_ISR &rArr; BSP_RF_SetRxMode &rArr; BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
</UL>

<P><STRONG><a name="[18d]"></a>rf_load_config</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf.o(i.rf_load_config))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_load_config &rArr; BSP_RF_LoadConfig
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_LoadConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[18e]"></a>rf_power_on</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf.o(i.rf_power_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = rf_power_on &rArr; BSP_RF_PowerOn &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_PowerOn
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[143]"></a>rf_rcv_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf.o(i.rf_rcv_data))
<BR><BR>[Calls]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_RecvData
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
</UL>

<P><STRONG><a name="[141]"></a>rf_rcv_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rf.o(i.rf_rcv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = rf_rcv_init &rArr; BSP_RF_RecvInit
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_RecvInit
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf433_init
</UL>

<P><STRONG><a name="[142]"></a>rf_snd_data</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, rf.o(i.rf_snd_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = rf_snd_data &rArr; BSP_RF_SendData &rArr; BSP_RF_SetTxMode &rArr; BSP_RF_WriteRegister &rArr; BSP_RF_SCK_SetLow &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
</UL>

<P><STRONG><a name="[188]"></a>rtc_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc.o(i.rtc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = rtc_init &rArr; BSP_RTC_Init &rArr; BSP_RTC_Write &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
</UL>

<P><STRONG><a name="[fd]"></a>rtc_read</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rtc.o(i.rtc_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = rtc_read &rArr; BSP_RTC_Read &rArr; localtime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heating_period
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_RTC
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Calculate
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordValveTime
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_response
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_systime_year_mon_day
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_systime_hour_min_sec
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;debug_info
</UL>

<P><STRONG><a name="[181]"></a>rtc_write</STRONG> (Thumb, 34 bytes, Stack size 48 bytes, rtc.o(i.rtc_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = rtc_write &rArr; BSP_RTC_Write &rArr; mktime &rArr; _localtime
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RTC_Write
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hardware_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_request
</UL>

<P><STRONG><a name="[100]"></a>save_params</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, sysparams.o(i.save_params))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = save_params &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_clr
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYLOG_DEBUG
</UL>
<BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_RTC
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Calculate
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordValveTime
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_request
</UL>

<P><STRONG><a name="[10c]"></a>soft_reset</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, sysparams.o(i.soft_reset))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_detect
</UL>

<P><STRONG><a name="[197]"></a>software_init</STRONG> (Thumb, 108 bytes, Stack size 88 bytes, main.o(i.software_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = software_init &rArr; sys_factory_reset &rArr; save_params &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_factory_reset
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_write
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MYLOG_LEVEL
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[182]"></a>sys_factory_reset</STRONG> (Thumb, 256 bytes, Stack size 64 bytes, sysparams.o(i.sys_factory_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = sys_factory_reset &rArr; save_params &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_params
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;software_init
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_request
</UL>

<P><STRONG><a name="[114]"></a>systimer_isr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, systimer.o(i.systimer_isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = systimer_isr &rArr; BSP_SysTimer_ISR
</UL>
<BR>[Calls]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_SysTimer_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[19d]"></a>uxListRemove</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, list.o(i.uxListRemove))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[1b6]"></a>uxTaskGetSystemState</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, tasks.o(i.uxTaskGetSystemState))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[1a1]"></a>vListInitialise</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, list.o(i.vListInitialise))
<BR><BR>[Called By]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1a8]"></a>vListInitialiseItem</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, list.o(i.vListInitialiseItem))
<BR><BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
</UL>

<P><STRONG><a name="[19f]"></a>vListInsert</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, list.o(i.vListInsert))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = vListInsert
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[19e]"></a>vListInsertEnd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, list.o(i.vListInsertEnd))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
</UL>

<P><STRONG><a name="[5a]"></a>vPortEnterCritical</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, port.o(i.vPortEnterCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = vPortEnterCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[5e]"></a>vPortExitCritical</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, port.o(i.vPortExitCritical))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>

<P><STRONG><a name="[1a6]"></a>vPortFree</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, heap_4.o(i.vPortFree))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInsertBlockIntoFreeList
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>

<P><STRONG><a name="[1c0]"></a>vPortSetupTimerInterrupt</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, port.o(i.vPortSetupTimerInterrupt))
<BR><BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
</UL>

<P><STRONG><a name="[d2]"></a>vTaskDelay</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, tasks.o(i.vTaskDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = vTaskDelay &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_RF_Init
</UL>

<P><STRONG><a name="[134]"></a>vTaskDelayUntil</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelayUntil))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = vTaskDelayUntil &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddCurrentTaskToDelayedList
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Power_Display_Temp_Runled
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Com_Rf_Valve
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Calculate
</UL>

<P><STRONG><a name="[5d]"></a>vTaskDelete</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, tasks.o(i.vTaskDelete))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = vTaskDelete &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
</UL>

<P><STRONG><a name="[1ab]"></a>vTaskGetInfo</STRONG> (Thumb, 130 bytes, Stack size 32 bytes, tasks.o(i.vTaskGetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eTaskGetState
</UL>
<BR>[Called By]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvListTasksWithinSingleList
</UL>

<P><STRONG><a name="[1b8]"></a>vTaskGetRunTimeStats</STRONG> (Thumb, 150 bytes, Stack size 40 bytes, tasks.o(i.vTaskGetRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vTaskGetRunTimeStats &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRunTimeStats
</UL>

<P><STRONG><a name="[1b9]"></a>vTaskList</STRONG> (Thumb, 168 bytes, Stack size 40 bytes, tasks.o(i.vTaskList))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vTaskList &rArr; uxTaskGetSystemState &rArr; prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvWriteNameToBuffer
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRunTimeStats
</UL>

<P><STRONG><a name="[158]"></a>vTaskResume</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, tasks.o(i.vTaskResume))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskResume &rArr; prvTaskIsTaskSuspended &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvTaskIsTaskSuspended
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
</UL>

<P><STRONG><a name="[3b]"></a>vTaskRunTimeStats</STRONG> (Thumb, 132 bytes, Stack size 400 bytes, vtaskruntimestats.o(i.vTaskRunTimeStats))
<BR><BR>[Stack]<UL><LI>Max Depth = 952<LI>Call Chain = vTaskRunTimeStats &rArr; auto_test &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[199]"></a>vTaskStartScheduler</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, tasks.o(i.vTaskStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = vTaskStartScheduler &rArr; xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortStartScheduler
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1ba]"></a>vTaskSuspend</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, tasks.o(i.vTaskSuspend))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = vTaskSuspend &rArr; vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSwitchContext
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskRunTimeStats
</UL>

<P><STRONG><a name="[1a3]"></a>vTaskSuspendAll</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tasks.o(i.vTaskSuspendAll))
<BR><BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[44]"></a>vTaskSwitchContext</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, tasks.o(i.vTaskSwitchContext))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = vTaskSwitchContext &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>

<P><STRONG><a name="[3a]"></a>vTask_Calculate</STRONG> (Thumb, 414 bytes, Stack size 56 bytes, vtask_calculate.o(i.vTask_Calculate))
<BR><BR>[Stack]<UL><LI>Max Depth = 504<LI>Call Chain = vTask_Calculate &rArr; Check_RTC &rArr; save_params &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;save_params
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rtc_read
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heating_period
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_RTC
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_triggered
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf433_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[38]"></a>vTask_Com_Rf_Valve</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vtask_com_rf_valve.o(i.vTask_Com_Rf_Valve))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = vTask_Com_Rf_Valve &rArr; com_recv_data_deal &rArr; fy_protocol_func_request &rArr; sys_factory_reset &rArr; save_params &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_deal
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;rf433_init
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[39]"></a>vTask_Power_Display_Temp_Runled</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, vtask_power_display_temp_runled.o(i.vTask_Power_Display_Temp_Runled))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = vTask_Power_Display_Temp_Runled &rArr; lcd_disp_menu &rArr; disp_systime_year_mon_day &rArr; disp_str &rArr; disp_number &rArr; lcd_update_screen &rArr; BSP_LCD_WriteData &rArr; BSP_LCD_Write &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wdg_reset
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_run_state
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lcd_disp_menu
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;collect_temp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_detect
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskGetTickCount
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_triggered
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_task.o(i.AppTaskCreate)
</UL>
<P><STRONG><a name="[1be]"></a>valve_action</STRONG> (Thumb, 368 bytes, Stack size 32 bytes, valve_deal.o(i.valve_action))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = valve_action &rArr; RecordValveTime &rArr; save_params &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_set
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;error_clr
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_run
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_get_state
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;motor_stop
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_action_LED_twinkle
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RecordValveTime
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_valve_state
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_deal
</UL>

<P><STRONG><a name="[1bf]"></a>valve_action_LED_twinkle</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, valve_deal.o(i.valve_action_LED_twinkle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = valve_action_LED_twinkle &rArr; led_on &rArr; BSP_LED_On &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_on
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;led_off
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_action
</UL>

<P><STRONG><a name="[1bc]"></a>valve_deal</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, valve_deal.o(i.valve_deal))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = valve_deal &rArr; valve_action &rArr; RecordValveTime &rArr; save_params &rArr; fs_write &rArr; flash_ext_write &rArr; BSP_FLASH_EXT_Write_MultiPages_Data &rArr; BSP_FLASH_EXT_WriteBytes &rArr; BSP_FLASH_EXT_ReadBytes &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;valve_action
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Com_Rf_Valve
</UL>

<P><STRONG><a name="[10b]"></a>valve_triggered</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, valve_deal.o(i.valve_triggered))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_detect
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Power_Display_Temp_Runled
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Calculate
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;com_recv_data_deal
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fy_protocol_func_request
</UL>

<P><STRONG><a name="[198]"></a>wdg_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wdg.o(i.wdg_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = wdg_init &rArr; BSP_WDG_Init &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDG_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1bd]"></a>wdg_reset</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wdg.o(i.wdg_reset))
<BR><BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_WDG_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Power_Display_Temp_Runled
</UL>

<P><STRONG><a name="[1bb]"></a>xPortStartScheduler</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, port.o(i.xPortStartScheduler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = xPortStartScheduler
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortSetupTimerInterrupt
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__asm___6_port_c_39a90d8d__prvStartFirstTask
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
</UL>

<P><STRONG><a name="[116]"></a>xPortSysTickHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, port.o(i.xPortSysTickHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = xPortSysTickHandler &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[5b]"></a>xTaskCreate</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, tasks.o(i.xTaskCreate))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = xTaskCreate &rArr; pvPortMalloc &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvInitialiseNewTask
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvAddNewTaskToReadyList
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskStartScheduler
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppTaskCreate
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>xTaskGetSchedulerState</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetSchedulerState))
<BR><BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[130]"></a>xTaskGetTickCount</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tasks.o(i.xTaskGetTickCount))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;auto_test
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Power_Display_Temp_Runled
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Com_Rf_Valve
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTask_Calculate
</UL>

<P><STRONG><a name="[1c2]"></a>xTaskIncrementTick</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, tasks.o(i.xTaskIncrementTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xPortSysTickHandler
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
</UL>

<P><STRONG><a name="[1a4]"></a>xTaskResumeAll</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, tasks.o(i.xTaskResumeAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvResetNextTaskUnblockTime
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
<LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[19c]"></a>prvAddCurrentTaskToDelayedList</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, tasks.o(i.prvAddCurrentTaskToDelayedList))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = prvAddCurrentTaskToDelayedList &rArr; vListInsert
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsert
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
</UL>
<BR>[Called By]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelayUntil
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelay
</UL>

<P><STRONG><a name="[1a0]"></a>prvAddNewTaskToReadyList</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, tasks.o(i.prvAddNewTaskToReadyList))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvAddNewTaskToReadyList &rArr; vPortExitCritical &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInsertEnd
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialise
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1a2]"></a>prvCheckTasksWaitingTermination</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, tasks.o(i.prvCheckTasksWaitingTermination))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxListRemove
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspendAll
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortExitCritical
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortEnterCritical
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvDeleteTCB
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvIdleTask
</UL>

<P><STRONG><a name="[1a5]"></a>prvDeleteTCB</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tasks.o(i.prvDeleteTCB))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
</UL>
<BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>

<P><STRONG><a name="[41]"></a>prvIdleTask</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tasks.o(i.prvIdleTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = prvIdleTask &rArr; prvCheckTasksWaitingTermination &rArr; prvDeleteTCB &rArr; vPortFree &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;prvCheckTasksWaitingTermination
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tasks.o(i.vTaskStartScheduler)
</UL>
<P><STRONG><a name="[1a7]"></a>prvInitialiseNewTask</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, tasks.o(i.prvInitialiseNewTask))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = prvInitialiseNewTask &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vListInitialiseItem
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pxPortInitialiseStack
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskCreate
</UL>

<P><STRONG><a name="[1aa]"></a>prvListTasksWithinSingleList</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, tasks.o(i.prvListTasksWithinSingleList))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = prvListTasksWithinSingleList &rArr; vTaskGetInfo &rArr; xTaskResumeAll &rArr; xTaskIncrementTick &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uxTaskGetSystemState
</UL>

<P><STRONG><a name="[1b7]"></a>prvResetNextTaskUnblockTime</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tasks.o(i.prvResetNextTaskUnblockTime))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskResumeAll
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskSuspend
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskDelete
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;xTaskIncrementTick
</UL>

<P><STRONG><a name="[1ac]"></a>prvTaskIsTaskSuspended</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tasks.o(i.prvTaskIsTaskSuspended))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = prvTaskIsTaskSuspended &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskResume
</UL>

<P><STRONG><a name="[1ad]"></a>prvWriteNameToBuffer</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, tasks.o(i.prvWriteNameToBuffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = prvWriteNameToBuffer
</UL>
<BR>[Calls]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskList
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vTaskGetRunTimeStats
</UL>

<P><STRONG><a name="[40]"></a>prvTaskExitError</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, port.o(i.prvTaskExitError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = prvTaskExitError &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> port.o(i.pxPortInitialiseStack)
</UL>
<P><STRONG><a name="[1af]"></a>prvHeapInit</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, heap_4.o(i.prvHeapInit))
<BR><BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[1b0]"></a>prvInsertBlockIntoFreeList</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, heap_4.o(i.prvInsertBlockIntoFreeList))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = prvInsertBlockIntoFreeList
</UL>
<BR>[Called By]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vPortFree
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pvPortMalloc
</UL>

<P><STRONG><a name="[117]"></a>SetSysClockTo72</STRONG> (Thumb, 160 bytes, Stack size 12 bytes, system_stm32f10x.o(i.SetSysClockTo72))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClockTo72
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a2]"></a>BSP_FLASH_EXT_Delay</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteBytes
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_ReadID
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_ReadBytes
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Erase4K
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteEnable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteDisable
</UL>

<P><STRONG><a name="[ac]"></a>BSP_FLASH_EXT_SPI_MosiSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_SPI_MosiSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_FLASH_EXT_SPI_MosiSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_WriteData
</UL>

<P><STRONG><a name="[a1]"></a>BSP_FLASH_EXT_SPI_NssSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_SPI_NssSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_FLASH_EXT_SPI_NssSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteBytes
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_ReadID
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_ReadBytes
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Erase4K
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteEnable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteDisable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WaitWriteComplete
</UL>

<P><STRONG><a name="[a7]"></a>BSP_FLASH_EXT_SPI_PortInit</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_SPI_PortInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = BSP_FLASH_EXT_SPI_PortInit &rArr; BSP_GPIO_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Init
</UL>

<P><STRONG><a name="[a9]"></a>BSP_FLASH_EXT_SPI_ReadData</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_SPI_ReadData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_FLASH_EXT_SPI_ReadData &rArr; BSP_GPIO_ReadState
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_ReadState
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_SckSet
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_ReadID
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_ReadBytes
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WaitWriteComplete
</UL>

<P><STRONG><a name="[ad]"></a>BSP_FLASH_EXT_SPI_SckSet</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_SPI_SckSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetLow
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_GPIO_SetHigh
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_WriteData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_ReadData
</UL>

<P><STRONG><a name="[a3]"></a>BSP_FLASH_EXT_SPI_WriteData</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_SPI_WriteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_SckSet
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_MosiSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteBytes
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_ReadID
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_ReadBytes
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Erase4K
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteEnable
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteDisable
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WaitWriteComplete
</UL>

<P><STRONG><a name="[a4]"></a>BSP_FLASH_EXT_WaitWriteComplete</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_WaitWriteComplete))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_FLASH_EXT_WaitWriteComplete &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_WriteData
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_ReadData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_NssSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteBytes
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Erase4K
</UL>

<P><STRONG><a name="[a5]"></a>BSP_FLASH_EXT_WriteDisable</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_WriteDisable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_FLASH_EXT_WriteDisable &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_WriteData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_NssSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteBytes
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Erase4K
</UL>

<P><STRONG><a name="[a0]"></a>BSP_FLASH_EXT_WriteEnable</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, bsp_flash_ext.o(i.BSP_FLASH_EXT_WriteEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = BSP_FLASH_EXT_WriteEnable &rArr; BSP_FLASH_EXT_SPI_WriteData &rArr; BSP_FLASH_EXT_SPI_SckSet &rArr; BSP_GPIO_SetLow
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_WriteData
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_SPI_NssSet
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Delay
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_WriteBytes
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_FLASH_EXT_Erase4K
</UL>

<P><STRONG><a name="[91]"></a>BSP_COM_Delay</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bsp_com.o(i.BSP_COM_Delay))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_SendChar
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_RecvInit
</UL>

<P><STRONG><a name="[89]"></a>BSP_COM_GetComIdx</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, bsp_com.o(i.BSP_COM_GetComIdx))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BSP_COM_GetComIdx
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_SendData
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_SendChar
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_RecvInit
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BSP_COM_Init
</UL>

<P><STRONG><a name="[121]"></a>_printf_core</STRONG> (Thumb, 996 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[127]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[126]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3d]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printf8.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0sprintf$8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0sprintf$8)
</UL>
<P><STRONG><a name="[124]"></a>_fp_digits</STRONG> (Thumb, 366 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[11f]"></a>_printf_core</STRONG> (Thumb, 1744 bytes, Stack size 136 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf
</UL>

<P><STRONG><a name="[129]"></a>_printf_post_padding</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[128]"></a>_printf_pre_padding</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[3e]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, printfa.o(i._sputc))
<BR><BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0vsprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0vsprintf)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
